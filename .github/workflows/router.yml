name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "Set version of Syncra Parser"
        required: true
        default: "1.0.0"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Tests
        run: ./gradlew clean test

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        id: set_version
        run: |
          echo "ROUTER_VERSION=${{ github.event.inputs.version || '1.0.0' }}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build . -t syncra/parser:${{ env.ROUTER_VERSION }}
          docker save -o parser.tar syncra/parser:${{ env.ROUTER_VERSION }}

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: parser.tar

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Copy Image to Server
        run: |
          echo "${{ secrets.SSH_KEY }}" > key.pem
          chmod 600 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem parser.tar ${{ secrets.USER }}@${{ secrets.HOST }}:/${{ secrets.USER }}/${{ secrets.DIR }}

      - name: Create .env file on Server
        run: |
          echo "ROUTER_VERSION=${{ env.ROUTER_VERSION }}" > .env
          echo "RABBIT_HOST=${{ secrets.RABBIT_HOST }}" >> .env
          echo "RABBIT_PORT=${{ secrets.RABBIT_PORT }}" >> .env
          echo "RABBIT_USER=${{ secrets.RABBIT_USER }}" >> .env
          echo "RABBIT_PASSWORD=${{ secrets.RABBIT_PASSWORD }}" >> .env
          echo "${{ secrets.SSH_KEY }}" > key.pem
          chmod 600 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem .env ${{ secrets.USER }}@${{ secrets.HOST }}:/${{ secrets.USER }}/${{ secrets.DIR }}

      - name: Load Container
        run: |
          echo "${{ secrets.SSH_KEY }}" > key.pem
          chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
            docker load -i /${{ secrets.USER }}/parser.tar
          EOF

      - name: Copy docker-compose.yml to Server
        run: |
          echo "${{ secrets.SSH_KEY }}" > key.pem
          chmod 600 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yml ${{ secrets.USER }}@${{ secrets.HOST }}:/${{ secrets.USER }}/${{ secrets.DIR }}

      - name: Restart Docker Compose
        run: |
          echo "${{ secrets.SSH_KEY }}" > key.pem
          chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.USER }}@${{ secrets.HOST }} << 'EOF'
            cd ${{ secrets.USER }}/${{ secrets.DIR }}
            docker-compose down -v
            docker-compose up -d --build
          EOF
